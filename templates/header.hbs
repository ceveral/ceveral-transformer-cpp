#pragma once
// Imports
{{#each imports}}
#include {{{this}}}
{{/each}}

namespace {{namespace}} {

{{#each enums}}
enum {{#if class}}class {{/if}}{{name}} {
{{#each members}}
  {{{this}}}{{#unless @last}},{{/unless}}
{{/each}}
};

{{/each}}
{{#each constants}}
{{#each members}}
const char *{{{../name}}}{{{name}}}; 
{{/each}}
{{/each}}

{{#each records}} 

{{#if comment}}
/** 
    {{name}}
    {{comment}}
*/
{{/if}}
class {{name}} {

public:
    {{name}}();
    {{name}}(const {{name}} &other);
    {{name}} &operator=(const {{name}} &other);
    bool operator==(const {{name}} &other);

    ~{{name}}();


{{#each properties}}
    {{#if comment}}
    {{> Document}}
    {{/if}}
    {{#if ref}}
    void set_{{name}}(const {{{type}}} &{{name}});
    {{else if pointer}}
    void set_{{name}}(std::shared_ptr<{{{type}}}> {{name}});
    {{else}}
    void set_{{name}}({{{type}}} {{name}});
    {{/if}}
    {{#if pointer}}
    std::shared_ptr<{{{type}}}> {{name}}() const;
    {{else if ref}}
    const {{{type}}} &{{name}}() const;
    {{else}}
    {{{type}}} {{name}}() const;
    {{/if}}
{{/each}}

private:
{{#each properties}}
{{#if pointer}}
    std::shared_ptr<{{{type}}}> m_{{name}};
{{else}}
    {{{type}}} m_{{name}};
{{/if}}
{{/each}}

};

{{/each}}
}

{{#each records}}
{{#if msgpack}}
{{> MsgPack}}
{{/if}}
{{/each}}